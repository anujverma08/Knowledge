Project -> template -> myapps -> index.html    280


What is the role of a backend in a web application, and how does it differ from the frontend?

Explain what an HTTP request is and list the common HTTP methods (e.g., GET, POST).

What is a server, and how does it handle a clientâ€™s request?

Whatâ€™s the difference between a relational database and a non-relational (NoSQL) database?

How does a backend application use environment variables, and why are they important?

What is an API, and why do we use it in backend development?

Explain what a primary key is in a database and why itâ€™s necessary.

What does it mean for a server to be "stateless," and how does this relate to REST APIs?

How would you store user passwords securely in a database?

What is the purpose of a configuration file in a backend application?

How would you handle a situation where a client sends invalid data to your API?

Explain the difference between authentication and authorization with a simple example.

Whatâ€™s the purpose of middleware in a backend application, and how might you use it?

How would you design a simple database schema for a blog with users, posts, and comments?

What are HTTP status codes, and what do 200, 404, and 500 specifically mean?

How would you write a basic API endpoint to retrieve a list of users from a database?

Whatâ€™s the difference between a GET request and a POST request in terms of data handling?

How would you prevent a backend API from crashing if a database connection fails?

Explain what caching is and how it can improve the performance of a backend system.

How would you log errors in a backend application, and why is logging important?

ðŸ“Œ Intermediate Level Questions (21-30)

How would you design a scalable URL shortening service like Bitly that handles millions of requests per day?

Explain the trade-offs between monolithic and microservices architectures in terms of deployment, scalability, and maintenance.

How would you architect a real-time chat application backend to support thousands of concurrent users?

What strategies would you use to ensure high availability in a distributed system?

Design a rate-limiting system for an API that restricts users to 100 requests per minute.

How would you handle database schema migrations in a zero-downtime deployment?

Explain how youâ€™d design a content delivery system with low latency for global users.

Whatâ€™s the difference between horizontal and vertical scaling, and when would you choose one over the other?

How would you design a notification system that supports email, SMS, and push notifications with retry mechanisms?

Describe how youâ€™d implement a load balancer from scratch and handle session persistence.